{"version":3,"file":"static/js/728.4d251bec.chunk.js","mappings":"iPAEaA,EAAcC,EAAAA,GAAAA,KAAH,4PAWXC,EAAQD,EAAAA,GAAAA,MAAH,0GAOLE,EAAQF,EAAAA,GAAAA,MAAH,uRAeLG,EAAYH,EAAAA,GAAAA,OAAH,ib,8BC5BTI,EAAe,WAE1B,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAExB,GAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,QACHN,EAASM,GACT,MACF,IAAK,WACHJ,EAAYI,GACZ,MACF,QACE,OAEL,EAEKC,GAAWC,EAAAA,EAAAA,MAQXC,EAAQ,WACZX,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAED,OACE,UAAChB,EAAD,CAAawB,SAdM,SAAAN,GACnBA,EAAEO,iBACFJ,EAASK,EAAAA,EAAAA,SAAwB,CAAEf,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAEhDQ,GACD,EASC,WACE,SAACrB,EAAD,CAAOyB,QAASrB,EAAhB,mBACA,SAACH,EAAD,CACEyB,KAAK,OACLjB,KAAK,OACLkB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRX,MAAOT,EACPqB,GAAI1B,EACJ2B,SAAUhB,KAEZ,SAACf,EAAD,CAAOyB,QAASnB,EAAhB,oBACA,SAACL,EAAD,CACEyB,KAAK,QACLjB,KAAK,QACLoB,UAAQ,EACRC,GAAIxB,EACJY,MAAOP,EACPoB,SAAUhB,KAEZ,SAACf,EAAD,CAAOyB,QAASlB,EAAhB,uBACA,SAACN,EAAD,CACEyB,KAAK,WACLjB,KAAK,WACLoB,UAAQ,EACRC,GAAIvB,EACJW,MAAOL,EACPkB,SAAUhB,KAEZ,SAACb,EAAD,CAAWwB,KAAK,SAAhB,wBAGL,ECvED,EATiB,WACf,OACE,iCACE,6CACA,SAACvB,EAAD,MAGL,C,wDCRM,IAkBIE,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  border: 3px solid;\n  border-radius: 15px;\n  margin: 40px auto 0;\n  background: radial-gradient(circle at 24.1% 68.8%, #323232 0, #000 99.4%);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 22px;\n  color: white;\n`;\n\nexport const Input = styled.input`\n  margin-top: 5px;\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border: 1px solid black;\n  margin-bottom: 16px;\n\n  &:focus {\n    outline: none;\n    border-color: red;\n    box-shadow: 0 0 3px 0 black inset, 0 0 3px 2px black;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 20px;\n  border: none;\n  color: white;\n  background: linear-gradient(\n    98.3deg,\n    rgb(0, 0, 0) 10.6%,\n    rgb(255, 0, 0) 97.7%\n  );\n  transition: all 150ms ease-in-out;\n\n  &:hover {\n    color: white;\n    text-shadow: 0 0 2px black;\n    box-shadow: 0 0 3px 0 black inset, 0 0 3px 2px black;\n  }\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormWrapper, Label, Input, SubmitBtn } from './RegisterForm.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth/auth-operations';\n\nexport const RegisterForm = () => {\n  \n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <FormWrapper onSubmit={handleSubmit}>\n      <Label htmlFor={nameInputId}>Name</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        id={nameInputId}\n        onChange={handleChange}\n      />\n      <Label htmlFor={emailInputId}>Email</Label>\n      <Input\n        type=\"email\"\n        name=\"email\"\n        required\n        id={emailInputId}\n        value={email}\n        onChange={handleChange}\n      />\n      <Label htmlFor={passwordInputId}>Password</Label>\n      <Input\n        type=\"password\"\n        name=\"password\"\n        required\n        id={passwordInputId}\n        value={password}\n        onChange={handleChange}\n      />\n      <SubmitBtn type=\"submit\">Register</SubmitBtn>\n    </FormWrapper>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <>\n      <title>Registration</title>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default Register;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormWrapper","styled","Label","Input","SubmitBtn","RegisterForm","nameInputId","nanoid","emailInputId","passwordInputId","useState","name","setName","email","setEmail","password","setPassword","handleChange","e","currentTarget","value","dispatch","useDispatch","reset","onSubmit","preventDefault","authOperations","htmlFor","type","pattern","title","required","id","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}